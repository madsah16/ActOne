package Neighbours;

/*Generated by MPS */

import actone.predefined.BOOLEAN;
import actone.predefined.INTEGER;
import actone.predefined.STRING;
import actone.base.ITerm;
import actone.base.Operator;
import actone.predefined.BOOLEAN.Bool;
import actone.base.Reductions;

public abstract class NEIGHBOUR {

  private BOOLEAN.Bool predefined_bool = null;
  private INTEGER.Int predefined_int = null;
  private STRING.String predefined_string = null;

  public static class Board extends ITerm {

    public Board(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public Board(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class Square extends ITerm {

    public Square(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public Square(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class Line extends ITerm {

    public Line(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public Line(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class VerticalNeighboursLine extends ITerm {

    public VerticalNeighboursLine(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public VerticalNeighboursLine(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }


  public static final Square sq11 = new Square(ITerm.Kind.VARIABLE, "sq11");
  public static final Square sq12 = new Square(ITerm.Kind.VARIABLE, "sq12");
  public static final Square sq13 = new Square(ITerm.Kind.VARIABLE, "sq13");
  public static final Square sq14 = new Square(ITerm.Kind.VARIABLE, "sq14");
  public static final Square sq21 = new Square(ITerm.Kind.VARIABLE, "sq21");
  public static final Square sq22 = new Square(ITerm.Kind.VARIABLE, "sq22");
  public static final Square sq23 = new Square(ITerm.Kind.VARIABLE, "sq23");
  public static final Square sq24 = new Square(ITerm.Kind.VARIABLE, "sq24");
  public static final Square sq31 = new Square(ITerm.Kind.VARIABLE, "sq31");
  public static final Square sq32 = new Square(ITerm.Kind.VARIABLE, "sq32");
  public static final Square sq33 = new Square(ITerm.Kind.VARIABLE, "sq33");
  public static final Square sq34 = new Square(ITerm.Kind.VARIABLE, "sq34");
  public static final Square sq41 = new Square(ITerm.Kind.VARIABLE, "sq41");
  public static final Square sq42 = new Square(ITerm.Kind.VARIABLE, "sq42");
  public static final Square sq43 = new Square(ITerm.Kind.VARIABLE, "sq43");
  public static final Square sq44 = new Square(ITerm.Kind.VARIABLE, "sq44");
  public static final Bool n1 = new Bool(ITerm.Kind.VARIABLE, "n1");
  public static final Bool n2 = new Bool(ITerm.Kind.VARIABLE, "n2");
  public static final Bool n3 = new Bool(ITerm.Kind.VARIABLE, "n3");
  public static final Bool n4 = new Bool(ITerm.Kind.VARIABLE, "n4");
  public static final Bool n5 = new Bool(ITerm.Kind.VARIABLE, "n5");
  public static final Bool n6 = new Bool(ITerm.Kind.VARIABLE, "n6");
  public static final Bool n7 = new Bool(ITerm.Kind.VARIABLE, "n7");
  public static final Bool n8 = new Bool(ITerm.Kind.VARIABLE, "n8");
  public static final Bool n9 = new Bool(ITerm.Kind.VARIABLE, "n9");
  public static final Bool n10 = new Bool(ITerm.Kind.VARIABLE, "n10");
  public static final Bool n11 = new Bool(ITerm.Kind.VARIABLE, "n11");
  public static final Bool n12 = new Bool(ITerm.Kind.VARIABLE, "n12");
  public static final Bool n13 = new Bool(ITerm.Kind.VARIABLE, "n13");
  public static final Bool n14 = new Bool(ITerm.Kind.VARIABLE, "n14");
  public static final Bool n15 = new Bool(ITerm.Kind.VARIABLE, "n15");
  public static final Bool n16 = new Bool(ITerm.Kind.VARIABLE, "n16");
  public static final Bool n17 = new Bool(ITerm.Kind.VARIABLE, "n17");
  public static final Bool n18 = new Bool(ITerm.Kind.VARIABLE, "n18");
  public static final Bool n19 = new Bool(ITerm.Kind.VARIABLE, "n19");
  public static final Bool n20 = new Bool(ITerm.Kind.VARIABLE, "n20");
  public static final Bool n21 = new Bool(ITerm.Kind.VARIABLE, "n21");
  public static final Bool n22 = new Bool(ITerm.Kind.VARIABLE, "n22");
  public static final Bool n23 = new Bool(ITerm.Kind.VARIABLE, "n23");
  public static final Bool n24 = new Bool(ITerm.Kind.VARIABLE, "n24");
  public static final Board board = new Board(ITerm.Kind.VARIABLE, "board");

  private static final Operator oper_ONE = new Operator(true, "ONE");
  private static final Operator oper_TWO = new Operator(true, "TWO");
  private static final Operator oper_THREE = new Operator(true, "THREE");
  private static final Operator oper_FOUR = new Operator(true, "FOUR");
  private static final Operator oper_UNSOLVED = new Operator(true, "UNSOLVED");
  private static final Operator oper_NEIGHBOUR = new Operator(true, "NEIGHBOUR");
  private static final Operator oper_NOTNEIGHBOUR = new Operator(true, "NOTNEIGHBOUR");
  private static final Operator oper_mkLine = new Operator(true, "mkLine");
  private static final Operator oper_mkBoard = new Operator(true, "mkBoard");
  private static final Operator oper_mkVerticalNeighboursLine = new Operator(true, "mkVerticalNeighboursLine");
  private static final Operator oper_withinOne = new Operator(false, "withinOne");
  private static final Operator oper_checkNeighbours = new Operator(false, "checkNeighbours");
  private static final Operator oper_checkHorizontal = new Operator(false, "checkHorizontal");
  private static final Operator oper_checkLine = new Operator(false, "checkLine");
  private static final Operator oper_uniqueValue = new Operator(false, "uniqueValue");
  private static final Operator oper_checkBoard = new Operator(false, "checkBoard");
  private static final Operator oper_checkVertical = new Operator(false, "checkVertical");

  public static Square ONE() {
    return new Square(oper_ONE);
  }
  public static Square TWO() {
    return new Square(oper_TWO);
  }
  public static Square THREE() {
    return new Square(oper_THREE);
  }
  public static Square FOUR() {
    return new Square(oper_FOUR);
  }
  public static Square UNSOLVED() {
    return new Square(oper_UNSOLVED);
  }
  public static Bool NEIGHBOUR() {
    return new Bool(oper_NEIGHBOUR);
  }
  public static Bool NOTNEIGHBOUR() {
    return new Bool(oper_NOTNEIGHBOUR);
  }
  public static Line mkLine(Square Square_0, Square Square_1, Square Square_2, Square Square_3, Bool Bool_0, Bool Bool_1, Bool Bool_2) {
    return new Line(oper_mkLine, Square_0, Square_1, Square_2, Square_3, Bool_0, Bool_1, Bool_2);
  }
  public static Board mkBoard(Line Line_0, Line Line_1, Line Line_2, Line Line_3, VerticalNeighboursLine VerticalNeighboursLine_0, VerticalNeighboursLine VerticalNeighboursLine_1, VerticalNeighboursLine VerticalNeighboursLine_2) {
    return new Board(oper_mkBoard, Line_0, Line_1, Line_2, Line_3, VerticalNeighboursLine_0, VerticalNeighboursLine_1, VerticalNeighboursLine_2);
  }
  public static VerticalNeighboursLine mkVerticalNeighboursLine(Bool Bool_3, Bool Bool_4, Bool Bool_5, Bool Bool_6) {
    return new VerticalNeighboursLine(oper_mkVerticalNeighboursLine, Bool_3, Bool_4, Bool_5, Bool_6);
  }
  public static Bool withinOne(Square Square_4, Square Square_5) {
    return new Bool(oper_withinOne, Square_4, Square_5);
  }
  public static Bool checkNeighbours(Square Square_6, Square Square_7, Bool Bool_7) {
    return new Bool(oper_checkNeighbours, Square_6, Square_7, Bool_7);
  }
  public static Bool checkHorizontal(Board Board_0) {
    return new Bool(oper_checkHorizontal, Board_0);
  }
  public static Bool checkLine(Line Line_4) {
    return new Bool(oper_checkLine, Line_4);
  }
  public static Bool uniqueValue(Square Square_8, Square Square_9) {
    return new Bool(oper_uniqueValue, Square_8, Square_9);
  }
  public static Bool checkBoard(Board Board_1) {
    return new Bool(oper_checkBoard, Board_1);
  }
  public static Bool checkVertical(Board Board_2) {
    return new Bool(oper_checkVertical, Board_2);
  }

  /*package*/ static void initAxioms() {
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.sq11, NEIGHBOUR.sq11), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.sq11), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.sq11, NEIGHBOUR.UNSOLVED()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.ONE(), NEIGHBOUR.TWO()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.ONE(), NEIGHBOUR.THREE()), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.ONE(), NEIGHBOUR.FOUR()), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.TWO(), NEIGHBOUR.ONE()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.TWO(), NEIGHBOUR.THREE()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.TWO(), NEIGHBOUR.FOUR()), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.THREE(), NEIGHBOUR.ONE()), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.THREE(), NEIGHBOUR.TWO()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.THREE(), NEIGHBOUR.FOUR()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.FOUR(), NEIGHBOUR.ONE()), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.FOUR(), NEIGHBOUR.TWO()), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.withinOne(NEIGHBOUR.FOUR(), NEIGHBOUR.THREE()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.NEIGHBOUR(), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.NOTNEIGHBOUR(), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.checkNeighbours(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.sq11, NEIGHBOUR.n1), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.checkNeighbours(NEIGHBOUR.sq11, NEIGHBOUR.UNSOLVED(), NEIGHBOUR.n1), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.checkNeighbours(NEIGHBOUR.sq21, NEIGHBOUR.sq22, BOOLEAN.True()), NEIGHBOUR.withinOne(NEIGHBOUR.sq21, NEIGHBOUR.sq22));
    ITerm.axiom(NEIGHBOUR.checkNeighbours(NEIGHBOUR.sq21, NEIGHBOUR.sq22, BOOLEAN.False()), BOOLEAN.Not(NEIGHBOUR.withinOne(NEIGHBOUR.sq21, NEIGHBOUR.sq22)));
    ITerm.axiom(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq21, NEIGHBOUR.UNSOLVED()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.uniqueValue(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.sq21), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.uniqueValue(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED()), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq21, NEIGHBOUR.sq21), BOOLEAN.False());
    ITerm.axiom(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq21, NEIGHBOUR.sq22), BOOLEAN.True());
    ITerm.axiom(NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq11, NEIGHBOUR.sq12, NEIGHBOUR.sq13, NEIGHBOUR.sq14, NEIGHBOUR.n1, NEIGHBOUR.n2, NEIGHBOUR.n3)), BOOLEAN.And(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq11, NEIGHBOUR.sq12), BOOLEAN.And(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq11, NEIGHBOUR.sq13), BOOLEAN.And(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq11, NEIGHBOUR.sq14), BOOLEAN.And(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq12, NEIGHBOUR.sq13), BOOLEAN.And(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq12, NEIGHBOUR.sq14), BOOLEAN.And(NEIGHBOUR.uniqueValue(NEIGHBOUR.sq13, NEIGHBOUR.sq14), BOOLEAN.And(NEIGHBOUR.checkNeighbours(NEIGHBOUR.sq11, NEIGHBOUR.sq12, NEIGHBOUR.n1), BOOLEAN.And(NEIGHBOUR.checkNeighbours(NEIGHBOUR.sq12, NEIGHBOUR.sq13, NEIGHBOUR.n2), NEIGHBOUR.checkNeighbours(NEIGHBOUR.sq13, NEIGHBOUR.sq14, NEIGHBOUR.n3))))))))));
    ITerm.axiom(NEIGHBOUR.checkHorizontal(NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.sq11, NEIGHBOUR.sq12, NEIGHBOUR.sq13, NEIGHBOUR.sq14, NEIGHBOUR.n1, NEIGHBOUR.n2, NEIGHBOUR.n3), NEIGHBOUR.mkLine(NEIGHBOUR.sq21, NEIGHBOUR.sq22, NEIGHBOUR.sq23, NEIGHBOUR.sq24, NEIGHBOUR.n4, NEIGHBOUR.n5, NEIGHBOUR.n6), NEIGHBOUR.mkLine(NEIGHBOUR.sq31, NEIGHBOUR.sq32, NEIGHBOUR.sq33, NEIGHBOUR.sq34, NEIGHBOUR.n7, NEIGHBOUR.n8, NEIGHBOUR.n9), NEIGHBOUR.mkLine(NEIGHBOUR.sq41, NEIGHBOUR.sq42, NEIGHBOUR.sq43, NEIGHBOUR.sq44, NEIGHBOUR.n10, NEIGHBOUR.n11, NEIGHBOUR.n12), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.n13, NEIGHBOUR.n14, NEIGHBOUR.n15, NEIGHBOUR.n16), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.n17, NEIGHBOUR.n18, NEIGHBOUR.n19, NEIGHBOUR.n20), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.n21, NEIGHBOUR.n22, NEIGHBOUR.n23, NEIGHBOUR.n24))), BOOLEAN.And(NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq11, NEIGHBOUR.sq12, NEIGHBOUR.sq13, NEIGHBOUR.sq14, NEIGHBOUR.n1, NEIGHBOUR.n2, NEIGHBOUR.n3)), BOOLEAN.And(NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq21, NEIGHBOUR.sq22, NEIGHBOUR.sq23, NEIGHBOUR.sq24, NEIGHBOUR.n4, NEIGHBOUR.n5, NEIGHBOUR.n6)), BOOLEAN.And(NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq31, NEIGHBOUR.sq32, NEIGHBOUR.sq33, NEIGHBOUR.sq34, NEIGHBOUR.n7, NEIGHBOUR.n8, NEIGHBOUR.n9)), NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq41, NEIGHBOUR.sq42, NEIGHBOUR.sq43, NEIGHBOUR.sq44, NEIGHBOUR.n10, NEIGHBOUR.n11, NEIGHBOUR.n12))))));
    ITerm.axiom(NEIGHBOUR.checkVertical(NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.sq11, NEIGHBOUR.sq12, NEIGHBOUR.sq13, NEIGHBOUR.sq14, NEIGHBOUR.n1, NEIGHBOUR.n2, NEIGHBOUR.n3), NEIGHBOUR.mkLine(NEIGHBOUR.sq21, NEIGHBOUR.sq22, NEIGHBOUR.sq23, NEIGHBOUR.sq24, NEIGHBOUR.n4, NEIGHBOUR.n5, NEIGHBOUR.n6), NEIGHBOUR.mkLine(NEIGHBOUR.sq31, NEIGHBOUR.sq32, NEIGHBOUR.sq33, NEIGHBOUR.sq34, NEIGHBOUR.n7, NEIGHBOUR.n8, NEIGHBOUR.n9), NEIGHBOUR.mkLine(NEIGHBOUR.sq41, NEIGHBOUR.sq42, NEIGHBOUR.sq43, NEIGHBOUR.sq44, NEIGHBOUR.n10, NEIGHBOUR.n11, NEIGHBOUR.n12), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.n13, NEIGHBOUR.n14, NEIGHBOUR.n15, NEIGHBOUR.n16), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.n17, NEIGHBOUR.n18, NEIGHBOUR.n19, NEIGHBOUR.n20), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.n21, NEIGHBOUR.n22, NEIGHBOUR.n23, NEIGHBOUR.n24))), BOOLEAN.And(NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq11, NEIGHBOUR.sq21, NEIGHBOUR.sq31, NEIGHBOUR.sq41, NEIGHBOUR.n13, NEIGHBOUR.n17, NEIGHBOUR.n21)), BOOLEAN.And(NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq12, NEIGHBOUR.sq22, NEIGHBOUR.sq32, NEIGHBOUR.sq42, NEIGHBOUR.n14, NEIGHBOUR.n18, NEIGHBOUR.n22)), BOOLEAN.And(NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq13, NEIGHBOUR.sq23, NEIGHBOUR.sq33, NEIGHBOUR.sq43, NEIGHBOUR.n15, NEIGHBOUR.n19, NEIGHBOUR.n23)), NEIGHBOUR.checkLine(NEIGHBOUR.mkLine(NEIGHBOUR.sq14, NEIGHBOUR.sq24, NEIGHBOUR.sq34, NEIGHBOUR.sq44, NEIGHBOUR.n16, NEIGHBOUR.n20, NEIGHBOUR.n24))))));
    ITerm.axiom(NEIGHBOUR.checkBoard(NEIGHBOUR.board), BOOLEAN.And(NEIGHBOUR.checkHorizontal(NEIGHBOUR.board), NEIGHBOUR.checkVertical(NEIGHBOUR.board)));
  }

  public static void main(String[] args) {
    System.out.println("Specification:\t" + "NEIGHBOUR");
    System.out.println("\tImport:\t" + "BOOLEAN");

    // Initiate axioms from all specifications 
    NEIGHBOUR.initAxioms();
    BOOLEAN.initAxioms();


    // Execute actions 
    final ITerm correctboard1 = ITerm.let("correctboard1", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    final ITerm correctboard2 = ITerm.let("correctboard2", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.THREE(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    final ITerm correctboard3 = ITerm.let("correctboard3", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.ONE(), NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.THREE(), NEIGHBOUR.TWO(), NEIGHBOUR.ONE(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.ONE(), NEIGHBOUR.FOUR(), NEIGHBOUR.THREE(), NEIGHBOUR.TWO(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.FOUR(), NEIGHBOUR.ONE(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    final ITerm correctboard4 = ITerm.let("correctboard4", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.ONE(), NEIGHBOUR.TWO(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.ONE(), NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    final ITerm incorrectboard1 = ITerm.let("incorrectboard1", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.ONE(), NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.ONE(), NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    final ITerm incorrectboard2 = ITerm.let("incorrectboard2", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.FOUR(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    final ITerm incorrectboard3 = ITerm.let("incorrectboard3", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.ONE(), NEIGHBOUR.THREE(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.THREE(), NEIGHBOUR.TWO(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.ONE(), NEIGHBOUR.FOUR(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.TWO(), NEIGHBOUR.THREE(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    final ITerm incorrectboard4 = ITerm.let("incorrectboard4", NEIGHBOUR.mkBoard(NEIGHBOUR.mkLine(NEIGHBOUR.FOUR(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.FOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkLine(NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.UNSOLVED(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR(), NEIGHBOUR.NOTNEIGHBOUR()), NEIGHBOUR.mkVerticalNeighboursLine(NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR(), NEIGHBOUR.NEIGHBOUR())));
    Reductions.initReduction(Reductions.Traversal.DFS, false, NEIGHBOUR.checkBoard((Board) correctboard1));
    Reductions.initReduction(Reductions.Traversal.DFS, false, NEIGHBOUR.checkBoard((Board) correctboard2));
    Reductions.initReduction(Reductions.Traversal.DFS, false, NEIGHBOUR.checkBoard((Board) incorrectboard1));
    Reductions.initReduction(Reductions.Traversal.DFS, false, NEIGHBOUR.checkBoard((Board) incorrectboard2));
    Reductions.initReduction(Reductions.Traversal.DFS, false, NEIGHBOUR.checkBoard((Board) correctboard3));
    Reductions.initReduction(Reductions.Traversal.DFS, false, NEIGHBOUR.checkBoard((Board) correctboard4));
    Reductions.initReduction(Reductions.Traversal.DFS, false, NEIGHBOUR.checkBoard((Board) incorrectboard3));

  }

}
