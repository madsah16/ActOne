package ActOne.runtime.predefined;

/*Generated by MPS */

import ActOne.runtime.model.ITerm;
import ActOne.runtime.model.Operator;

public class STRING {

  public static class String extends ITerm {

    public String(java.lang.String val) {
      super(val);
    }
    public String(ITerm.Kind kind, java.lang.String name) {
      super(kind, name);
    }
    public String(Operator operator, ITerm... terms) {
      super(operator, terms);
    }

    @Override
    public ITerm reduceIteration() {

      // Only perform reduce if term is an operator 
      if (kind == ITerm.Kind.LET || kind == ITerm.Kind.VARIABLE) {
        return this;
      }

      // Copy of the original root 
      ITerm root = this.clone();

      // NOTE: We skip oper_Length due to it residing in INTEGER 


      if (root.operator == oper_Append) {
        ITerm first = root.terms.get(0);
        ITerm second = root.terms.get(1);
        if (first.kind == ITerm.Kind.STRING && second.kind == ITerm.Kind.STRING) {
          root = stringValueTerm(first.stringVal + second.stringVal);
        }
      } else if (root.operator == oper_Slice) {

        ITerm first = root.terms.get(0);
        ITerm second = root.terms.get(1);
        ITerm third = root.terms.get(2);

        if (first.kind == ITerm.Kind.STRING && second.kind == ITerm.Kind.INT && third.kind == ITerm.Kind.INT) {
          java.lang.String str = first.stringVal;
          int beginIndex = second.intVal;
          int endIndex = third.intVal;
          root = stringValueTerm(str.substring(beginIndex, endIndex));
        }
      }

      // If not reduced, try non-predefined axioms 
      if (this.equals(root)) {
        return this.useNonpredefinedAxioms();
      }
      return root;
    }
  }

  /**
   * Create a string-term
   */
  public static String stringValueTerm(java.lang.String val) {
    return new String(val);
  }


  public static Operator oper_Length = new Operator(false, "Length");
  private static Operator oper_Append = new Operator(false, "Append");
  private static Operator oper_Slice = new Operator(false, "Slice");

  public static INTEGER.Int Length(String str) {
    return new INTEGER.Int(oper_Length, str);
  }

  public static String Append(String str1, String str2) {
    return new String(oper_Append, str1, str2);
  }

  public static String Slice(String str1, INTEGER.Int begin, INTEGER.Int end) {
    return new String(oper_Slice, str1, begin, end);
  }

  public static void initAxioms() {
    System.out.println("Inbuilt-String loaded");
  }


}
